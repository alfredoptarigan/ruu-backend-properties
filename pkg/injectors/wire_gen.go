// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injectors

import (
	"alfredo/ruu-properties/config"
	"alfredo/ruu-properties/pkg/controllers"
	"alfredo/ruu-properties/pkg/repositories"
	"alfredo/ruu-properties/pkg/services"
	"alfredo/ruu-properties/pkg/validator"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeApplication() *config.Application {
	db := config.InitDatabasePostgres()
	application := config.NewApplication(db)
	return application
}

func InitializeAuthController() controllers.AuthController {
	client := config.InitRedis()
	redisRepository := repositories.NewRedisRepository(client)
	redisService := services.NewRedisService(redisRepository)
	jwtService := services.NewJwtService(redisService)
	db := config.InitDatabasePostgres()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	authService := services.NewAuthService(jwtService, userService, userRepository, redisService)
	authController := controllers.NewAuthController(authService, redisService, jwtService)
	return authController
}

func InitializeUserController() controllers.UserController {
	client := config.InitRedis()
	redisRepository := repositories.NewRedisRepository(client)
	redisService := services.NewRedisService(redisRepository)
	db := config.InitDatabasePostgres()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userController := controllers.NewUserController(redisService, userService)
	return userController
}

func InitializeClientController() controllers.ClientController {
	client := config.InitRedis()
	redisRepository := repositories.NewRedisRepository(client)
	redisService := services.NewRedisService(redisRepository)
	db := config.InitDatabasePostgres()
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	clientRepository := repositories.NewClientRepository(db)
	clientService := services.NewClientService(clientRepository)
	clientController := controllers.NewClientController(redisService, userService, clientService)
	return clientController
}

func InitializeFeatureController() controllers.FeatureController {
	db := config.InitDatabasePostgres()
	featureRepository := repositories.NewFeatureRepository(db)
	featureService := services.NewFeatureService(featureRepository)
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	client := config.InitRedis()
	redisRepository := repositories.NewRedisRepository(client)
	redisService := services.NewRedisService(redisRepository)
	featureController := controllers.NewFeatureController(featureService, userService, redisService)
	return featureController
}

// injector.go:

var initDBPostgresSet = wire.NewSet(config.InitDatabasePostgres)

var redisSet = wire.NewSet(config.InitRedis, repositories.NewRedisRepository, services.NewRedisService)

var jwtSet = wire.NewSet(services.NewJwtService)

var authSet = wire.NewSet(
	redisSet,
	initDBPostgresSet, services.NewUserService, repositories.NewUserRepository, validator.NewValidator,
)
