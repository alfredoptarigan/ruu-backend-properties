basePath: /api/v1
definitions:
  dtos.ClientRequest:
    properties:
      address:
        type: string
      contact_person:
        type: string
      email:
        type: string
      name:
        type: string
      phone_number:
        type: string
    required:
    - address
    - contact_person
    - email
    - name
    - phone_number
    type: object
  dtos.ClientResponse:
    properties:
      address:
        type: string
      contact_person:
        type: string
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  dtos.ErrorResponseDTO:
    properties:
      code:
        description: 'opsional: kode error internal'
        type: integer
      errors: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  dtos.GenerateTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  dtos.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dtos.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      expires_in:
        type: integer
      name:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
      user_uuid:
        type: string
    type: object
  dtos.PaginatedSuccessResponse:
    properties:
      data: {}
      message:
        type: string
      meta:
        $ref: '#/definitions/dtos.PaginationMeta'
      success:
        type: boolean
    type: object
  dtos.PaginationMeta:
    properties:
      limit:
        description: jumlah data per halaman
        type: integer
      page:
        description: halaman saat ini
        type: integer
      total:
        description: total seluruh data
        type: integer
      total_pages:
        description: total halaman
        type: integer
    type: object
  dtos.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  dtos.UserRegisterRequest:
    properties:
      confirmation_password:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      photo_url:
        type: string
      role:
        type: string
    required:
    - confirmation_password
    - email
    - name
    - password
    - phone_number
    - role
    type: object
host: localhost:9090
info:
  contact:
    email: your-email@example.com
    name: API Support
  description: API documentation for RUU Properties Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: RUU Properties API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user's refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      summary: User logout
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.GenerateTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      summary: Refresh access token
      tags:
      - auth
  /clients:
    get:
      consumes:
      - application/json
      description: Get a list of all clients with pagination and search functionality
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - default: name
        description: Field to search by (name, email, phone_number, contact_person)
        in: query
        name: search_by
        type: string
      - default: created_at
        description: Field to sort by (name, email, created_at, updated_at)
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.PaginatedSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.ClientResponse'
                  type: array
                meta:
                  $ref: '#/definitions/dtos.PaginationMeta'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - Client
    post:
      consumes:
      - application/json
      description: Create a new client for renting/selling properties
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ClientResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - BearerAuth: []
      summary: Create a new client
      tags:
      - Client
  /clients/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information of a specific client
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ClientResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - BearerAuth: []
      summary: Get a client by ID
      tags:
      - Client
  /clients/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete a client by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - BearerAuth: []
      summary: Delete a client
      tags:
      - Client
  /clients/{id}/update:
    put:
      consumes:
      - application/json
      description: Update client information by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Client request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ClientResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - BearerAuth: []
      summary: Update an existing client
      tags:
      - Client
  /user/register:
    post:
      consumes:
      - multipart/form-data
      description: Create a new user account
      parameters:
      - description: User's full name
        in: formData
        name: name
        required: true
        type: string
      - description: User's email address
        in: formData
        name: email
        required: true
        type: string
      - description: Password (min 6 characters)
        in: formData
        name: password
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirmation_password
        required: true
        type: string
      - description: User's phone number
        in: formData
        name: phone_number
        required: true
        type: string
      - description: User role
        in: formData
        name: role
        required: true
        type: string
      - description: User profile image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.UserRegisterRequest'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      summary: Register a new user
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
